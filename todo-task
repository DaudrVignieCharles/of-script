#!/usr/bin/python3.4
# -*-coding:UTF8 -*
# Copyright 2016 Charles Daudré-Vignier <daudre.vignier.charles@narod.ru>
#    'todo' is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    any later version.
#
#    'todo' is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with 'todo'.  If not, see <http://www.gnu.org/licenses/>.

import os
import argparse
from lib.todo_task import *

parser = argparse.ArgumentParser(description="A simple todo list manager.", epilog="")
parser.add_argument('-d', '--date', action="store", type=str, help='Date for task (syntax : day-month-year).')
parser.add_argument('-t', '--text', action="store", type=str, help='Task description.')
parser.add_argument('-r', '--remove', action="store", metavar='TASK', nargs='+', type=str, help="Remove a task.")
parser.add_argument('-u', '--update', action="store", nargs='+', metavar=('TASK', 'NEW NAME'), type=str, help="Update a task. You can specify NEW NAME to rename task")
parser.add_argument('-n', '--new', action = "store", metavar='TASK', type=str, help="New task.")
parser.add_argument('-k', '--tags', action="store", nargs='+', metavar='TAG', type=str, help="Specify tags for a task")
parser.add_argument('-l', '--list', action = "store_true", default=False, help = "List tasks.")

args = parser.parse_args()

task_date = args.date
task_text = args.text
task_tags = args.tags
remove_task = args.remove
update_task = args.update
new_task = args.new
ask_list = args.list

if not remove_task and not update_task and not new_task and not ask_list:
    if task_date or task_tags or task_text:
        parser.print_usage()
        if task_date:
            print("todo-task: error: argument -d/--date : you must specify -r/--remove or -u/--update or -n/--new")
        if task_tags:
            print("todo-task: error: argument -k/--tags : you must specify -r/--remove or -u/--update or -n/--new or -k/--tags")
        if task_text:
            print("todo-task: error: argument -t/--text : you must specify -r/--remove or -u/--update or -n/--new")
    else:
        parser.print_help()
    exit()

if update_task:
    update_name = update_task[0]
    if len(update_task) == 2:
        update_new_name = update_task[1]
    elif len(update_task) > 2:
        parser.print_usage()
        print("todo-task: error: argument -u/--update: no more than two arguments")
        exit(1)
    else:
        update_new_name = None

HOME = os.environ['HOME']
SAVEFILE = HOME+'/.todo-task'

# Get or create task_list
if os.path.isfile(SAVEFILE):
    task_list = load_tasks(SAVEFILE)
else:
    task_list = {}

# Print task list
if ask_list:
    if task_tags:
        isdone=[]
        for i in task_list.keys():
            for j in task_tags:
                if i in isdone:
                    pass
                else:
                    if j in task_list[i]['tags']:
                        isdone.append(i)
                        print_task(i, task_list)
    else:
        for i in task_list.keys():
            print_task(i,  task_list)
    exit(0)

# Format date if not None
if task_date:
    task_date = dater(task_date)

# Format text if not None
if task_text:
    task_text = task_text.replace('\\n', '\n')

# New task
if new_task:
    if new_task in task_list:
        print(new_task + ": already exist, use --update for owerwrite.")
        exit(1)
    if not task_text:
        print("You cannot create a new task without à descriptive text (option --text)")
        exit(1)
    task_list[new_task]={'date': task_date, 'text': task_text, 'tags': task_tags}
    save_tasks(task_list, SAVEFILE)
    exit(0)

# Remove task
if remove_task:
    for task in remove_task:
        if not task in task_list.keys():
            print('No task have name: ' + task)
        else :
            task_list.pop(task)
            save_tasks(task_list, SAVEFILE)

# Update task
if update_task:
    if not update_name in task_list.keys():
        print('No task named: ' + update_name)
        exit(0)
    if not task_date and not task_text and not task_tags and not update_new_name:
        print('No change done for task : ' + update_name)
    if task_date:
        task_list[update_name]['date'] = task_date
    if task_text:
        task_list[update_name]['text'] = task_text
    if task_tags:
        task_list[update_name]['tags'] = task_tags
    if update_new_name:
        task_list[update_new_name] = task_list.pop(update_name)
    save_tasks(task_list, SAVEFILE)








